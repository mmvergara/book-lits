scalar DateTime
scalar UUID

type User {
  id: UUID!
  name: String!
  # Add other relevant user fields (e.g., email, role)
  createdAt: DateTime!
}

type Publisher {
  id: UUID!
  name: String!
  createdAt: DateTime!

  ownerId: UUID!
  owner: User!
  books: [Book!]!
}

type Book {
  id: UUID!
  name: String!
  createdAt: DateTime!

  author: User!
  publisher: Publisher!
}

type Query {
  users: [User!]!
  user(id: UUID!): User

  publishers: [Publisher!]!
  publisher(id: UUID!): Publisher

  books: [Book!]!
  book(id: UUID!): Book
}

type Mutation {
  createPublisher(data: CreatePublisherInput!): Publisher!
  updatePublisher(id: UUID!, data: UpdatePublisherInput!): Publisher!
  deletePublisher(id: UUID!): Publisher!

  createBook(data: CreateBookInput!): Book!
  updateBook(data: UpdateBookInput!): Book!
  deleteBook(id: UUID!): Book!
}

input CreatePublisherInput {
  name: String!
  ownerId: UUID!
}

input UpdatePublisherInput {
  name: String
}

input CreateBookInput {
  name: String!
  authorId: UUID!
  publisherId: UUID!
}

input UpdateBookInput {
  bookId: UUID!
  name: String!
  authorId: UUID!
  publisherId: UUID!
}
