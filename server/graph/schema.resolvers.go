package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"log"

	"github.com/go-graph-booklets/server/gqlgen-todos/graph/model"
	"github.com/go-graph-booklets/server/gqlgen-todos/services/auth"
	"github.com/go-graph-booklets/server/gqlgen-todos/services/loaders"
	"github.com/google/uuid"
)

// Author is the resolver for the author field.
func (r *bookResolver) Author(ctx context.Context, obj *model.Book) (*model.User, error) {
	// Get Author by BookID
	log.Println("Get Author by BookID ðŸ“¦")

	user, err := loaders.For(ctx).UserLoader.Load(ctx, obj.AuthorID)
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting author")
	}
	return user, nil
}

// Publisher is the resolver for the publisher field.
func (r *bookResolver) Publisher(ctx context.Context, obj *model.Book) (*model.Publisher, error) {
	log.Println("Get Publisher by BookID ðŸ“¦")

	publisher, err := loaders.For(ctx).PublisherLoader.Load(ctx, obj.PublisherID)
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting publisher")
	}
	return publisher, nil
}

// CreatePublisher is the resolver for the createPublisher field.
func (r *mutationResolver) CreatePublisher(ctx context.Context, data model.CreatePublisherInput) (*model.Publisher, error) {
	log.Println("Create Publisher")
	user := auth.ForContext(ctx)
	if data.OwnerID != user.ID {
		return nil, fmt.Errorf("you can't create a publisher for another user")
	}
	newPublisher, err := r.Repo.CreatePublisher(data.Name, model.PublisherID(user.ID))
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error creating publisher")
	}

	return &newPublisher, nil
}

// UpdatePublisher is the resolver for the updatePublisher field.
func (r *mutationResolver) UpdatePublisher(ctx context.Context, id uuid.UUID, data model.UpdatePublisherInput) (*model.Publisher, error) {
	log.Println("Update Publisher")
	user := auth.ForContext(ctx)
	targetPublisher, err := r.Repo.GetPublisherByID(model.PublisherID(id))

	if err != nil {
		return nil, fmt.Errorf("publisher not found")
	}

	if targetPublisher.OwnerID != model.UserID(user.ID) {
		return nil, fmt.Errorf("unauthorized")
	}
	publisher, err := r.Repo.UpdatePublisherNameByID(model.PublisherID(id), *data.Name)
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error updating publisher")
	}

	return &publisher, nil
}

// DeletePublisher is the resolver for the deletePublisher field.
func (r *mutationResolver) DeletePublisher(ctx context.Context, id uuid.UUID) (*model.Publisher, error) {
	log.Println("Delete Publisher By ID")
	user := auth.ForContext(ctx)
	targetPublisher, err := r.Repo.GetPublisherByID(model.PublisherID(id))
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting target publisher")
	}

	if targetPublisher.OwnerID != model.UserID(user.ID) {
		return nil, fmt.Errorf("Unauthorized")
	}

	deletedPublisher, err := r.Repo.DeletePublisher(targetPublisher.ID)
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error deleting publisher")
	}
	return &deletedPublisher, nil
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, data model.CreateBookInput) (*model.Book, error) {
	log.Println("Create Book")

	newBook, err := r.Repo.CreateBook(data.Name, model.PublisherID(data.PublisherID), model.UserID(data.AuthorID))
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error creating book")
	}
	return &newBook, nil
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, data model.UpdateBookInput) (*model.Book, error) {
	log.Println("Update Book Name")
	user := auth.ForContext(ctx)
	if user.ID != data.AuthorID {
		return nil, fmt.Errorf("Unauthorized")
	}

	updatedBook, err := r.Repo.UpdateBookName(model.BookID(data.BookID), data.Name)
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error updating book")
	}
	return &updatedBook, nil
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id uuid.UUID) (*model.Book, error) {
	log.Println("Delete Book by ID")

	deletedBook, err := r.Repo.DeleteBook(model.BookID(id))
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error deleting book")

	}
	return &deletedBook, nil
}

// Owner is the resolver for the owner field.
func (r *publisherResolver) Owner(ctx context.Context, obj *model.Publisher) (*model.User, error) {
	log.Println("Get User by PublisherID ðŸ“¦")

	user, err := loaders.For(ctx).UserLoader.Load(ctx, obj.OwnerID)
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting owner")
	}
	return user, nil
}

// Books is the resolver for the books field.
func (r *publisherResolver) Books(ctx context.Context, obj *model.Publisher) ([]*model.Book, error) {
	log.Println("Get All Books by PublisherID")

	books, err := r.Repo.GetBooksByPublisherID(obj.ID)
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting books")
	}
	return books, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	log.Println("Get All Users")
	users, err := r.Repo.GetUsers()
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting users")
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uuid.UUID) (*model.User, error) {
	log.Println("Get User By userID")
	user, err := r.Repo.GetUserByID(model.UserID(id))

	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting user")
	}

	return &user, nil
}

// Publishers is the resolver for the publishers field.
func (r *queryResolver) Publishers(ctx context.Context) ([]*model.Publisher, error) {
	log.Println("Get All Publishers")
	publishers, err := r.Repo.GetPublishers()
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting publishers")
	}
	return publishers, nil
}

// Publisher is the resolver for the publisher field.
func (r *queryResolver) Publisher(ctx context.Context, id uuid.UUID) (*model.Publisher, error) {
	log.Println("Get Publisher By ID")

	publisher, err := r.Repo.GetPublisherByID(model.PublisherID(id))
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting publisher")
	}

	return &publisher, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	log.Println("Get All Books")

	books, err := r.Repo.GetBooks()
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting books")
	}
	return books, nil
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id uuid.UUID) (*model.Book, error) {
	log.Println("Get Book By ID ðŸ“¦")

	book, err := loaders.For(ctx).BookLoader.Load(ctx, model.BookID(id))
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting book")
	}

	return book, nil
}

// Books is the resolver for the books field.
func (r *userResolver) Books(ctx context.Context, obj *model.User) ([]*model.Book, error) {
	// Get All Books by AuthorID
	log.Println("Get All Books by AuthorID ðŸ“¦")
	books, err := loaders.For(ctx).BookByAuthorLoader.Load(ctx, model.UserID(obj.ID))
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting books")
	}
	return books, nil
}

// Publishers is the resolver for the publishers field.
func (r *userResolver) Publishers(ctx context.Context, obj *model.User) ([]*model.Publisher, error) {
	// Get All Publishers by UserID
	log.Println("Get All Publishers by UserID ðŸ“¦")
	publishers, err := loaders.For(ctx).PublisherByOwnerLoader.Load(ctx, model.UserID(obj.ID))
	if err != nil {
		log.Println(err)
		return nil, fmt.Errorf("error getting publishers")
	}
	return publishers, nil
}

// Book returns BookResolver implementation.
func (r *Resolver) Book() BookResolver { return &bookResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Publisher returns PublisherResolver implementation.
func (r *Resolver) Publisher() PublisherResolver { return &publisherResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type bookResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type publisherResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
