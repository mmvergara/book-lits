package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"log"

	"github.com/go-graph-booklets/server/gqlgen-todos/graph/model"
	"github.com/go-graph-booklets/server/gqlgen-todos/services/auth"
	"github.com/go-graph-booklets/server/gqlgen-todos/services/loaders"
	"github.com/google/uuid"
)

// Author is the resolver for the author field.
func (r *bookResolver) Author(ctx context.Context, obj *model.Book) (*model.User, error) {
	// Get Author by BookID
	log.Println("Get Author by BookID")
	user, err := loaders.For(ctx).UserLoader.Load(ctx, obj.AuthorID)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// Publisher is the resolver for the publisher field.
func (r *bookResolver) Publisher(ctx context.Context, obj *model.Book) (*model.Publisher, error) {
	log.Println("Get Publisher by BookID")
	publisher, err := loaders.For(ctx).PublisherLoader.Load(ctx, obj.PublisherID)
	if err != nil {
		return nil, err
	}
	return publisher, nil
}

// CreatePublisher is the resolver for the createPublisher field.
func (r *mutationResolver) CreatePublisher(ctx context.Context, data model.CreatePublisherInput) (*model.Publisher, error) {
	log.Println("CreatePublisher 👾")
	user := auth.ForContext(ctx)
	if data.OwnerID != user.ID.String() {
		return nil, fmt.Errorf("you can't create a publisher for another user")
	}
	newPublisher, err := r.Repo.CreatePublisher(data.Name, user.ID)
	if err != nil {
		log.Println(err)
		return nil, err
	}

	return &newPublisher, nil
}

// UpdatePublisher is the resolver for the updatePublisher field.
func (r *mutationResolver) UpdatePublisher(ctx context.Context, id string, data model.UpdatePublisherInput) (*model.Publisher, error) {
	log.Println("UpdatePublisher")
	panic(fmt.Errorf("not implemented: UpdatePublisher - updatePublisher"))
}

// DeletePublisher is the resolver for the deletePublisher field.
func (r *mutationResolver) DeletePublisher(ctx context.Context, id string) (*model.Publisher, error) {
	log.Println("Delete Publisher By ID 🌶️")
	user := auth.ForContext(ctx)
	publisherID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}

	targetPublisher, err := r.Repo.GetPublisherByID(publisherID)
	if err != nil {
		return nil, err
	}

	if targetPublisher.OwnerID != user.ID.String() {
		return nil, fmt.Errorf("Unauthorized")
	}

	deletedPublisher, err := r.Repo.DeletePublisher(publisherID)
	return &deletedPublisher, err
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, data model.CreateBookInput) (*model.Book, error) {
	log.Println("CreateBook 📚")
	publisherUUID, err := uuid.Parse(data.PublisherID)
	if err != nil {
		return nil, err
	}

	authorUUID, err := uuid.Parse(data.AuthorID)
	if err != nil {
		return nil, err
	}
	newBook, err := r.Repo.CreateBook(data.Name, publisherUUID, authorUUID)
	return &newBook, err
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, id string, data model.UpdateBookInput) (*model.Book, error) {
	log.Println("UpdateBook")
	panic(fmt.Errorf("not implemented: UpdateBook - updateBook"))
}

// 🍑🥭🍍🥥🥝🍅🍆🥑🫛🥦

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id string) (*model.Book, error) {
	log.Println("Delete Book by ID 🥬")
	bookID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}

	deletedBook, err := r.Repo.DeleteBook(bookID)
	return &deletedBook, err
}

// Owner is the resolver for the owner field.
func (r *publisherResolver) Owner(ctx context.Context, obj *model.Publisher) (*model.User, error) {
	log.Println("Get User by PublisherID 🍎")
	user, err := loaders.For(ctx).UserLoader.Load(ctx, obj.OwnerID)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// Books is the resolver for the books field.
func (r *publisherResolver) Books(ctx context.Context, obj *model.Publisher) ([]*model.Book, error) {
	log.Println("Get Books by PublisherID 🍋")
	publisherID, err := uuid.Parse(obj.ID)
	if err != nil {
		return nil, err
	}

	books, err := r.Repo.GetBooksByPublisherID(publisherID)
	if err != nil {
		return nil, err
	}
	return books, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	log.Println("Get All Users 🍌")
	users, err := r.Repo.GetUsers()
	if err != nil {
		return nil, err
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	log.Println("Get User By userID 🍉")
	userID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}
	log.Println("GetUserById: ", userID)
	user, err := r.Repo.GetUserByID(userID)
	if err != nil {
		return nil, err
	}

	return &user, nil
}

// Publishers is the resolver for the publishers field.
func (r *queryResolver) Publishers(ctx context.Context) ([]*model.Publisher, error) {
	log.Println("Get All Publishers 🍇")
	publishers, err := r.Repo.GetPublishers()
	if err != nil {
		return nil, err
	}
	return publishers, nil
}

// Publisher is the resolver for the publisher field.
func (r *queryResolver) Publisher(ctx context.Context, id string) (*model.Publisher, error) {
	log.Println("Get Publisher By ID 🍓")
	publisherID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}

	publisher, err := r.Repo.GetPublisherByID(publisherID)
	if err != nil {
		return nil, err
	}

	return &publisher, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	log.Println("Get All Books 🍈")
	books, err := r.Repo.GetBooks()
	if err != nil {
		return nil, err
	}
	return books, nil
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*model.Book, error) {
	log.Println("Get Book By ID 🍒")
	book, err := loaders.For(ctx).BookLoader.Load(ctx, id)
	if err != nil {
		return nil, err
	}

	return book, nil
}

// Book returns BookResolver implementation.
func (r *Resolver) Book() BookResolver { return &bookResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Publisher returns PublisherResolver implementation.
func (r *Resolver) Publisher() PublisherResolver { return &publisherResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type bookResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type publisherResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
