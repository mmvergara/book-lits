package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/go-graph-booklets/server/gqlgen-todos/graph/model"
	"github.com/google/uuid"
)

// ID is the resolver for the id field.
func (r *bookResolver) ID(ctx context.Context, obj *model.Book) (string, error) {
	return obj.ID.String(), nil
}

// CreatedAt is the resolver for the created_at field.
func (r *bookResolver) CreatedAt(ctx context.Context, obj *model.Book) (string, error) {
	return obj.CreatedAt.String(), nil
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, name string, publisherID string, authorID string) (*model.Book, error) {
	publisherUUID, err := uuid.Parse(publisherID)
	if err != nil {
		return nil, err
	}

	authorUUID, err := uuid.Parse(authorID)
	if err != nil {
		return nil, err
	}

	newBook, err := r.Repo.CreateBook(name, publisherUUID, authorUUID)
	return &newBook, err
}

// UpdateBookName is the resolver for the updateBookName field.
func (r *mutationResolver) UpdateBookName(ctx context.Context, id string, newBookName string) (*model.Book, error) {
	bookID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}

	updatedBook, err := r.Repo.UpdateBookName(bookID, newBookName)
	return &updatedBook, err
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id string) (*model.Book, error) {
	bookID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}

	deletedBook, err := r.Repo.DeleteBook(bookID)
	return &deletedBook, err
}

// CreatePublisher is the resolver for the createPublisher field.
func (r *mutationResolver) CreatePublisher(ctx context.Context, name string) (*model.Publisher, error) {
	publisher, err := r.Repo.CreatePublisher(name)
	return &publisher, err
}

// DeletePublisher is the resolver for the deletePublisher field.
func (r *mutationResolver) DeletePublisher(ctx context.Context, id string) (*model.Publisher, error) {
	publisherID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}

	deletedPublisher, err := r.Repo.DeletePublisher(publisherID)
	return &deletedPublisher, err
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, password string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUsername is the resolver for the updateUsername field.
func (r *mutationResolver) UpdateUsername(ctx context.Context, id string, username string, password string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUsername - updateUsername"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// ID is the resolver for the id field.
func (r *publisherResolver) ID(ctx context.Context, obj *model.Publisher) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CreatedAt is the resolver for the created_at field.
func (r *publisherResolver) CreatedAt(ctx context.Context, obj *model.Publisher) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// Books is the resolver for the books field.
func (r *publisherResolver) Books(ctx context.Context, obj *model.Publisher) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// Publishers is the resolver for the publishers field.
func (r *queryResolver) Publishers(ctx context.Context) ([]*model.Publisher, error) {
	panic(fmt.Errorf("not implemented: Publishers - publishers"))
}

// Publisher is the resolver for the publisher field.
func (r *queryResolver) Publisher(ctx context.Context, id string) (*model.Publisher, error) {
	panic(fmt.Errorf("not implemented: Publisher - publisher"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *model.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CreatedAt is the resolver for the created_at field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *model.User) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - created_at"))
}

// Books is the resolver for the books field.
func (r *userResolver) Books(ctx context.Context, obj *model.User) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// Book returns BookResolver implementation.
func (r *Resolver) Book() BookResolver { return &bookResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Publisher returns PublisherResolver implementation.
func (r *Resolver) Publisher() PublisherResolver { return &publisherResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type bookResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type publisherResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
